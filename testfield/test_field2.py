# designated test field for De Casteljau's algorithm
# terminated
# bezier curve can't express movement trajectory
import matplotlib.pyplot as plt
import time

SIZE = 1
plt.figure(figsize=(5, 5))


def midpoint(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return ((x1 + x2) / 2, (y1 + y2) / 2)


MAX_LEVEL = 5


def draw_curve(points, level=1):
    if level == MAX_LEVEL:
        # 當達到最大層級，繪製最後一條線
        plt.plot([points[0][0], points[-1][0]], [points[0][1], points[-1][1]], "b-")
    else:
        # 計算中點
        new_points = []
        for i in range(len(points) - 1):
            new_points.append(midpoint(points[i], points[i + 1]))
        # 遞迴呼叫
        draw_curve(points, level + 1)


control_points = [
    # (0.6219786405563354,0.46783533692359924),(0.6187632083892822,0.4638376235961914),(0.6185892820358276,0.4667133092880249),(0.6213506460189819,0.46965888142585754),(0.6258754134178162,0.4725778102874756),(0.6256814002990723,0.46924149990081787),(0.6264639496803284,0.4725825786590576),(0.6305311918258667,0.4723559617996216),(0.6302683353424072,0.469144731760025),(0.6324912905693054,0.4779427647590637),(0.6238822340965271,0.4612624943256378),(0.6360294818878174,0.4634305536746979),(0.624952495098114,0.45846712589263916),(0.6294240951538086,0.46477678418159485),(0.6380264759063721,0.4703930616378784),(0.6308643817901611,0.4695233106613159),(0.6320935487747192,0.4679115116596222),(0.6340072751045227,0.4681340157985687),(0.6346405148506165,0.4720146656036377),(0.6286689043045044,0.4706171154975891),(0.6288022398948669,0.4727933406829834)
# (0.49521517753601074,0.4812070429325104),(0.49891144037246704,0.4818325340747833),(0.49597978591918945,0.48069947957992554),(0.4978847801685333,0.4803917407989502),(0.49751800298690796,0.48134034872055054),(0.49720853567123413,0.48226574063301086),(0.49644654989242554,0.481029748916626),(0.4937419295310974,0.4884376525878906),(0.4943189024925232,0.5031157732009888),(0.4843592047691345,0.527289867401123),(0.47166934609413147,0.6089159846305847),(0.4811058044433594,0.6237145662307739),(0.48976385593414307,0.6381661295890808),(0.48836567997932434,0.6299569606781006),(0.4925541281700134,0.6237698197364807),(0.49720779061317444,0.6358634829521179),(0.49765658378601074,0.6373255848884583),(0.4940468668937683,0.6242184042930603),(0.4778554439544678,0.5112091302871704),(0.4816662073135376,0.4998135268688202),(0.49413713812828064,0.48887181282043457)
(0.505378782749176,0.5589663982391357),(0.507887601852417,0.5595974326133728),(0.5065816044807434,0.5591190457344055),(0.5057867765426636,0.5599932074546814),(0.5066772699356079,0.5598899126052856),(0.5072324872016907,0.5596300363540649),(0.5055049657821655,0.5613670945167542),(0.5047985315322876,0.5674535036087036),(0.5037883520126343,0.5745167136192322),(0.4886852204799652,0.5663190484046936),(0.466178297996521,0.635282039642334),(0.47682881355285645,0.6648396253585815),(0.4801097512245178,0.6749758720397949),(0.48282819986343384,0.6721785664558411),(0.49821364879608154,0.6841291189193726),(0.4970729351043701,0.6974018216133118),(0.49860307574272156,0.6952289938926697),(0.49489736557006836,0.6843584179878235),(0.49938535690307617,0.5988855361938477),(0.5080848336219788,0.5819278359413147),(0.5121835470199585,0.5623421669006348)
]
# 呼叫函數繪製曲線
start_time = time.time()
draw_curve(control_points)
end_time = time.time()

x_points, y_points = zip(*control_points)  # 分離 x 和 y 坐標
plt.plot(x_points, y_points, 'ro-', label='控制點')  # 繪製控制點

print(f"time:{end_time-start_time}")
# 設定坐標軸
plt.xlim(0, SIZE)
plt.ylim(0, SIZE)
plt.gca().set_aspect("equal", adjustable="box")
plt.gca().invert_yaxis()

# 顯示圖片
plt.show()
